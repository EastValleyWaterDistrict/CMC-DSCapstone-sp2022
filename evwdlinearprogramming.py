# -*- coding: utf-8 -*-
"""EVWDLinearProgramming (With PRVs).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VwcDGoP7CX44sXlHT4z11eKQVXRJtO7q
"""


import pulp as p
from pulp import *

import numpy as np
import pandas as pd

from scipy.optimize import linprog

def linear_programming_model(user_inputs):

  #Define the problem as minimization and name it
  Lp_prob = p.LpProblem('kWhMinimization', p.LpMinimize)

  # Pump Decision Variables
  P9_B1 = p.LpVariable ("P9_B1", lowBound = 0)
  P9_B2 = p.LpVariable ("P9_B2", lowBound = 0)
  P24_B1 = p.LpVariable ("P24_B1", lowBound = 0)
  P24_B2 = p.LpVariable ("P24_B2", lowBound = 0)
  P24_B3 = p.LpVariable ("P24_B3", lowBound = 0)
  P25_B1 = p.LpVariable ("P25_B1", lowBound = 0)
  P33_B1 = p.LpVariable ("P33_B1", lowBound = 0)
  P33_B2 = p.LpVariable ("P33_B2", lowBound = 0)
  P33_B3 = p.LpVariable ("P33_B3", lowBound = 0)
  P34_B1 = p.LpVariable ("P34_B1", lowBound = 0)
  P34_B2 = p.LpVariable ("P34_B2", lowBound = 0)
  P37_B1 = p.LpVariable ("P37_B1", lowBound = 0)
  P37_B2 = p.LpVariable ("P37_B2", lowBound = 0)
  P39_B1 = p.LpVariable ("P39_B1", lowBound = 0)
  P39_B2 = p.LpVariable ("P39_B2", lowBound = 0)
  P39_B3 = p.LpVariable ("P39_B3", lowBound = 0)
  P39_B4 = p.LpVariable ("P39_B4", lowBound = 0)
  P40_B1 = p.LpVariable ("P40_B1", lowBound = 0)
  P40_B2 = p.LpVariable ("P40_B2", lowBound = 0)
  P40_B3 = p.LpVariable ("P40_B3", lowBound = 0)
  P40_B4 = p.LpVariable ("P40_B4", lowBound = 0)
  P56_B1 = p.LpVariable ("P56_B1", lowBound = 0)
  P56_B2 = p.LpVariable ("P56_B2", lowBound = 0)
  P59_B1 = p.LpVariable ("P59_B1", lowBound = 0)
  P59_B2 = p.LpVariable ("P59_B2", lowBound = 0)
  P59_B3 = p.LpVariable ("P59_B3", lowBound = 0)
  P99_B1 = p.LpVariable ("P99_B1", lowBound = 0)
  P99_B2 = p.LpVariable ("P99_B2", lowBound = 0)
  P101_B1 = p.LpVariable ("P101_B1", lowBound = 0)
  P101_B2 = p.LpVariable ("P101_B2", lowBound = 0)
  P108_B1 = p.LpVariable ("P108_B1", lowBound = 0)
  P108_B2 = p.LpVariable ("P108_B2", lowBound = 0)
  P125_B1 = p.LpVariable ("P125_B1", lowBound = 0)
  P125_B2 = p.LpVariable ("P125_B2", lowBound = 0)
  P127_B1 = p.LpVariable ("P127_B1", lowBound = 0)
  P127_B2 = p.LpVariable ("P127_B2", lowBound = 0)
  P129_B1 = p.LpVariable ("P129_B1", lowBound = 0)
  P129_B2 = p.LpVariable ("P129_B2", lowBound = 0)
  P129_B3 = p.LpVariable ("P129_B3", lowBound = 0)
  P129_B4 = p.LpVariable ("P129_B4", lowBound = 0)
  P129_B5 = p.LpVariable ("P129_B5", lowBound = 0)
  P130_B1 = p.LpVariable ("P130_B1", lowBound = 0)
  P130_B2 = p.LpVariable ("P130_B2", lowBound = 0)
  P131_B1 = p.LpVariable ("P131_B1", lowBound = 0)
  P131_B2 = p.LpVariable ("P131_B2", lowBound = 0)
  P131_B3 = p.LpVariable ("P131_B3", lowBound = 0)
  P134_B1 = p.LpVariable ("P134_B1", lowBound = 0)
  P134_B2 = p.LpVariable ("P134_B2", lowBound = 0)
  P134_B3 = p.LpVariable ("P134_B3", lowBound = 0)
  P134_B4 = p.LpVariable ("P134_B4", lowBound = 0)
  P134_B5 = p.LpVariable ("P134_B5", lowBound = 0)
  P134_B6 = p.LpVariable ("P134_B6", lowBound = 0)
  P134_B7 = p.LpVariable ("P134_B7", lowBound = 0)
  P134_B8 = p.LpVariable ("P134_B8", lowBound = 0)
  P137_B1 = p.LpVariable ("P137_B1", lowBound = 0)
  P137_B2 = p.LpVariable ("P137_B2", lowBound = 0)
  P140_B1 = p.LpVariable ("P140_B1", lowBound = 0)
  P140_B2 = p.LpVariable ("P140_B2", lowBound = 0)
  P142_B1 = p.LpVariable ("P142_B1", lowBound = 0)
  P142_B2 = p.LpVariable ("P142_B2", lowBound = 0)
  P142_B3 = p.LpVariable ("P142_B3", lowBound = 0)
  P143_B1 = p.LpVariable ("P143_B1", lowBound = 0)
  P143_B2 = p.LpVariable ("P143_B2", lowBound = 0)
  P143_B3 = p.LpVariable ("P143_B3", lowBound = 0)
  P149_B1 = p.LpVariable ("P149_B1", lowBound = 0)
  P149_B2 = p.LpVariable ("P149_B2", lowBound = 0)
  P149_B3 = p.LpVariable ("P149_B3", lowBound = 0)
  P149_B4 = p.LpVariable ("P149_B4", lowBound = 0)

  #Well Decision Variables
  P9_W1 = p.LpVariable ("P9_W1", lowBound = 0)
  P11_W1 = p.LpVariable ("P11_W1", lowBound = 0)
  P24_W1 = p.LpVariable ("P24_W1", lowBound = 0)
  P24_W2 = p.LpVariable ("P24_W2", lowBound = 0)
  P25_W1 = p.LpVariable ("P25_W1", lowBound = 0)
  P28_W1 = p.LpVariable ("P28_W1", lowBound = 0)
  P39_W1 = p.LpVariable ("P39_W1", lowBound = 0)
  P125_W1 = p.LpVariable ("P125_W1", lowBound = 0)
  P132_W1 = p.LpVariable ("P132_W1", lowBound = 0)
  P141_W1 = p.LpVariable ("P141_W1", lowBound = 0)
  P142_W1 = p.LpVariable ("P142_W1", lowBound = 0)
  P143_W1 = p.LpVariable ("P143_W1", lowBound = 0)
  P146_W1 = p.LpVariable ("P146_W1", lowBound = 0)
  P146_W2 = p.LpVariable ("P146_W2", lowBound = 0)
  P147_W1 = p.LpVariable ("P147_W1", lowBound = 0)
  P151_W1 = p.LpVariable ("P151_W1", lowBound = 0)

  #PRV Decision Variables
  PRV33 = p.LpVariable ("PRV33", lowBound = 0)
  PRV40 = p.LpVariable ("PRV40", lowBound = 0)
  PRV108 = p.LpVariable ("PRV108", lowBound = 0) 
  PRV127 = p.LpVariable ("PRV127", lowBound = 0)
  #PRV301 = p.LpVariable ("PRV301", lowBound = 0) #Taken out of model because it only serves as protection from overpressurization
  #PRV302 = p.LpVariable ("PRV302", lowBound = 0) #Goes from subzone of foothill to a different subzone of foothill (Foothill -> Baldridge). Not included in model for redundancy sake
  PRV305 = p.LpVariable ("PRV305", lowBound = 0)
  #PRV306 = p.LpVariable ("PRV306", lowBound = 0) #Taken out of model because not in use
  #PRV308 = p.LpVariable ("PRV308", lowBound = 0) #Goes from subzone of foothill to a different subzone of foothill (Foothill -> Mercedes). Not included in model for redundancy sake
  PRV309 = p.LpVariable ("PRV309", lowBound = 0)
  PRV311 = p.LpVariable ("PRV311", lowBound = 0)
  PRV324 = p.LpVariable ("PRV324", lowBound = 0)
  PRV325 = p.LpVariable ("PRV325", lowBound = 0)
  PRV326 = p.LpVariable ("PRV326", lowBound = 0)

  # Demand inputs from Demand Predictive Model 
  # nultiply by 7.48 to convert to cubic 
  Hydro101D = (user_inputs[0])
  Hydro149D = (user_inputs[1])
  Hydro34D = (user_inputs[2])
  Hydro59D = (user_inputs[3])
  Canal1D = (user_inputs[4])
  Canal2D = (user_inputs[5])
  Canal3D = (user_inputs[6])
  FoothillD = (user_inputs[7])
  IntermediateD = (user_inputs[8])
  LowerD = (user_inputs[9])
  MountainD = (user_inputs[10])
  UpperD = (user_inputs[11])

  # Input Coefficients
  P9_B1C = user_inputs[12]
  P9_B2C = user_inputs[13]
  P24_B1C = user_inputs[14]
  P24_B2C = user_inputs[15]
  P24_B3C = user_inputs[16]
  P25_B1C = user_inputs[17]
  P33_B1C = user_inputs[18]
  P33_B2C = user_inputs[19]
  P33_B3C = user_inputs[20]
  P34_B1C = user_inputs[21]
  P34_B2C = user_inputs[22]
  P37_B1C = user_inputs[23]
  P37_B2C = user_inputs[24]
  P39_B1C = user_inputs[25]
  P39_B2C = user_inputs[26]
  P39_B3C = user_inputs[27]
  P39_B4C = user_inputs[28]
  P40_B1C = user_inputs[29]
  P40_B2C = user_inputs[30]
  P40_B3C = user_inputs[31]
  P40_B4C = user_inputs[32]
  P56_B1C = user_inputs[33]
  P56_B2C = user_inputs[34]
  P59_B1C = user_inputs[35]
  P59_B2C = user_inputs[36]
  P59_B3C = user_inputs[37]
  P99_B1C = user_inputs[38]
  P99_B2C = user_inputs[39]
  P101_B1C = user_inputs[40]
  P101_B2C = user_inputs[41]
  P108_B1C = user_inputs[42]
  P108_B2C = user_inputs[43]
  P125_B1C = user_inputs[44]
  P125_B2C = user_inputs[45]
  P127_B1C = user_inputs[46]
  P127_B2C = user_inputs[47]
  P129_B1C = user_inputs[48]
  P129_B2C = user_inputs[49]
  P129_B3C = user_inputs[50]
  P129_B4C = user_inputs[51]
  P129_B5C = user_inputs[52]
  P130_B1C = user_inputs[53]
  P130_B2C = user_inputs[54]
  P131_B1C = user_inputs[55]
  P131_B2C = user_inputs[56]
  P131_B3C = user_inputs[57]
  P134_B1C = user_inputs[58]
  P134_B2C = user_inputs[59]
  P134_B3C = user_inputs[60]
  P134_B4C = user_inputs[61]
  P134_B5C = user_inputs[62]
  P134_B6C = user_inputs[63]
  P134_B7C = user_inputs[64]
  P134_B8C = user_inputs[65]
  P137_B1C = user_inputs[66]
  P137_B2C = user_inputs[67]
  P140_B1C = user_inputs[68]
  P140_B2C = user_inputs[69]
  P142_B1C = user_inputs[70]
  P142_B2C = user_inputs[71]
  P142_B3C = user_inputs[72]
  P143_B1C = user_inputs[73]
  P143_B2C = user_inputs[74]
  P143_B3C = user_inputs[75]
  P149_B1C = user_inputs[76]
  P149_B2C = user_inputs[77]
  P149_B3C = user_inputs[78]
  P149_B4C = user_inputs[79]

  P9_W1C = user_inputs[80]
  P11_W1C = user_inputs[81]
  P24_W1C = user_inputs[82]
  P24_W2C = user_inputs[83]
  P25_W1C = user_inputs[84]
  P28_W1C = user_inputs[85]
  P39_W1C = user_inputs[86]
  P125_W1C = user_inputs[87]
  P132_W1C = user_inputs[88]
  P141_W1C = user_inputs[89]
  P142_W1C = user_inputs[90]
  P143_W1C = user_inputs[91]
  P146_W1C = user_inputs[92]
  P146_W2C = user_inputs[93]
  P147_W1C = user_inputs[94]
  P151_W1C = user_inputs[95]

  # PRVs will ALWAYS be 0 or 1
  PRV33C = user_inputs[96]
  PRV40C = user_inputs[97]
  PRV108C = user_inputs[98]
  PRV127C = user_inputs[99]
  PRV305C = user_inputs[100]
  PRV309C = user_inputs[101]
  PRV311C = user_inputs[102]
  PRV324C = user_inputs[103]
  PRV325C = 1
  PRV326C = 1

  # JEN, we need you to connect the inputs from the UI to the coefficient_inputs list below


  # coefficient_inputs = user_inputs # The percentage inputs need to go in here!!
  coefficients=[P9_B1C,P9_B2C,P24_B1C,P24_B2C,P24_B3C,P25_B1C,P33_B1C,P33_B2C,P33_B3C,P34_B1C,P34_B2C,P37_B1C,P37_B2C,P39_B1C,P39_B2C,P39_B3C,P39_B4C,P40_B1C,P40_B2C,P40_B3C,P40_B4C,P56_B1C,P56_B2C,P59_B1C,P59_B2C,P59_B3C,P99_B1C,P99_B2C,P101_B1C,P101_B2C,P108_B1C,P108_B2C,P125_B1C,P125_B2C,P127_B1C,P127_B2C,P129_B1C,P129_B2C,P129_B3C,P129_B4C,P129_B5C,P130_B1C,P130_B2C,P131_B1C,P131_B2C,P131_B3C,P134_B1C,P134_B2C,P134_B3C,P134_B4C,P134_B5C,P134_B6C,P134_B7C,P134_B8C,P137_B1C,P137_B2C,P140_B1C,P140_B2C,P142_B1C,P142_B2C,P142_B3C,P143_B1C,P143_B2C,P143_B3C,P149_B1C,P149_B2C,P149_B3C,P149_B4C,P9_W1C,P11_W1C,P24_W1C,P24_W2C,P25_W1C,P28_W1C,P39_W1C,P125_W1C,P132_W1C,P141_W1C,P142_W1C,P143_W1C,P146_W1C,P146_W2C,P147_W1C,P151_W1C,PRV33C,PRV40C,PRV108C,PRV127C,PRV305C,PRV309C,PRV311C,PRV324C,PRV325C,PRV326C]


  # Objective Function(the full objective function)

  #  Pump Decision Variables
  Lp_prob +=(
      296 * P9_B1
  +  306 * P9_B2
  +  422 * P24_B1
  +  369 * P24_B2
  +  384 * P24_B3
  +  287 * P25_B1
  +  305 * P33_B1
  +  315 * P33_B2
  +  265 * P33_B3
  +  238 * P34_B1
  +  245 * P34_B2
  +  414 * P37_B1
  +  381 * P37_B2
  +  442 * P39_B1
  +  284 * P39_B2
  +  539 * P39_B3
  +  767 * P39_B4
  +  311 * P40_B1
  +  319 * P40_B2
  +  314 * P40_B3
  +  314 * P40_B4
  +  239 * P56_B1
  +  317 * P56_B2
  +  193 * P59_B1
  +  198 * P59_B2
  +  215 * P59_B3
  +  258 * P99_B1
  +  269 * P99_B2
  +  151 * P101_B1
  +  149 * P101_B2
  +  227 * P108_B1
  +  217 * P108_B2
  +  150 * P125_B1
  +  149 * P125_B2
  +  257 * P127_B1
  +  240 * P127_B2
  +  272 * P129_B1
  +  250 * P129_B2
  +  256 * P129_B3
  +  432 * P129_B4
  +  450 * P129_B5
  +  266 * P130_B1
  +  308 * P130_B2
  +  381 * P131_B1
  +  309 * P131_B2
  +  308 * P131_B3
  +  244 * P134_B1
  +  337 * P134_B2
  +  394 * P134_B3
  +  272 * P134_B4
  +  511 * P134_B5
  +  514 * P134_B6
  +  280 * P134_B7
  +  430 * P134_B8
  +  320 * P137_B1
  +  321 * P137_B2
  +  323 * P140_B1
  +  350 * P140_B2
  +  256 * P142_B1
  +  270 * P142_B2
  +  319 * P142_B3
  +  296 * P143_B1
  +  308 * P143_B2
  +  300 * P143_B3
  +  226 * P149_B1
  +  192 * P149_B2
  +  223 * P149_B3
  +  231 * P149_B4
  +  467 * P9_W1
  +  767 * P11_W1
  +  512 * P24_W1
  +  653 * P24_W2
  +  700 * P25_W1
  +  595 * P28_W1
  +  684 * P39_W1
  +  402 * P125_W1
  +  630 * P132_W1
  +  751 * P141_W1
  +  539 * P142_W1
  +  785 * P143_W1
  +  742 * P146_W1
  +  833 * P146_W2
  +  481 * P147_W1
  +  684 * P151_W1 )

  # Constraints(all of the pump, well, and demand constraints):

  #Pump Capacity Constraints
  Lp_prob += P9_B1	<=	542 * P9_B1C
  Lp_prob += P9_B2	<=	612 * P9_B2C
  Lp_prob += P24_B1	<=	980 * P24_B1C
  Lp_prob += P24_B2	<=	850 * P24_B2C
  Lp_prob += P24_B3	<=	760 * P24_B3C
  Lp_prob += P25_B1	<=	798 * P25_B1C
  Lp_prob += P33_B1	<=	1553 * P33_B1C
  Lp_prob += P33_B2	<=	1004 * P33_B2C
  Lp_prob += P33_B3	<=	934 * P33_B3C
  Lp_prob += P34_B1	<=	285 * P34_B1C
  Lp_prob += P34_B2	<=	892 * P34_B2C
  Lp_prob += P37_B1	<=	835 * P37_B1C
  Lp_prob += P37_B2	<=	795 * P37_B2C
  Lp_prob += P39_B1	<=	425 * P39_B1C
  Lp_prob += P39_B2	<=	725 * P39_B2C
  Lp_prob += P39_B3	<=	970 * P39_B3C
  Lp_prob += P39_B4	<=	863 * P39_B4C
  Lp_prob += P40_B1	<=	1301 * P40_B1C
  Lp_prob += P40_B2	<=	1293 * P40_B2C
  Lp_prob += P40_B3	<=	1295 * P40_B3C
  Lp_prob += P40_B4	<=	1308 * P40_B4C
  Lp_prob += P56_B1	<=	1119 * P56_B1C
  Lp_prob += P56_B2	<=	532 * P56_B2C
  Lp_prob += P59_B1	<=	647 * P59_B1C
  Lp_prob += P59_B2	<=	615 * P59_B2C
  Lp_prob += P59_B3	<=	286 * P59_B3C
  Lp_prob += P99_B1	<=	624 * P99_B1C
  Lp_prob += P99_B2	<=	541 * P99_B2C
  Lp_prob += P101_B1	<=	992 * P101_B1C
  Lp_prob += P101_B2	<=	1004 * P101_B2C
  Lp_prob += P108_B1	<=	1278 * P108_B1C
  Lp_prob += P108_B2	<=	1207 * P108_B2C
  Lp_prob += P125_B1	<=	1187 * P125_B1C
  Lp_prob += P125_B2	<=	595 * P125_B2C
  Lp_prob += P127_B1	<=	1285 * P127_B1C
  Lp_prob += P127_B2	<=	1361 * P127_B2C
  Lp_prob += P129_B1	<=	1647 * P129_B1C
  Lp_prob += P129_B2	<=	1636 * P129_B2C
  Lp_prob += P129_B3	<=	1648 * P129_B3C
  Lp_prob += P129_B4	<=	980 * P129_B4C
  Lp_prob += P129_B5	<=	971 * P129_B5C
  Lp_prob += P130_B1	<=	847 * P130_B1C
  Lp_prob += P130_B2	<=	807 * P130_B2C
  Lp_prob += P131_B1	<=	442 * P131_B1C
  Lp_prob += P131_B2	<=	345 * P131_B2C
  Lp_prob += P131_B3	<=	358 * P131_B3C
  Lp_prob += P134_B1	<=	905 * P134_B1C
  Lp_prob += P134_B2	<=	860 * P134_B2C
  Lp_prob += P134_B3	<=	869 * P134_B3C
  Lp_prob += P134_B4	<=	896 * P134_B4C
  Lp_prob += P134_B5	<=	833 * P134_B5C
  Lp_prob += P134_B6	<=	627 * P134_B6C
  Lp_prob += P134_B7	<=	660 * P134_B7C
  Lp_prob += P134_B8	<=	853 * P134_B8C
  Lp_prob += P137_B1	<=	530 * P137_B1C
  Lp_prob += P137_B2	<=	523 * P137_B2C
  Lp_prob += P140_B1	<=	777 * P140_B1C
  Lp_prob += P140_B2	<=	800 * P140_B2C
  Lp_prob += P142_B1	<=	977 * P142_B1C
  Lp_prob += P142_B2	<=	498 * P142_B2C
  Lp_prob += P142_B3	<=	820 * P142_B3C
  Lp_prob += P143_B1	<=	2950 * P143_B1C
  Lp_prob += P143_B2	<=	2280 * P143_B2C
  Lp_prob += P143_B3	<=	2500 * P143_B3C
  Lp_prob += P149_B1	<=	173 * P149_B1C
  Lp_prob += P149_B2	<=	215 * P149_B2C
  Lp_prob += P149_B3	<=	1786 * P149_B3C
  Lp_prob += P149_B4	<=	1690 * P149_B4C

  #Well Capacity Constraints
  Lp_prob += P9_W1	<=	1112 * P9_W1C
  Lp_prob += P11_W1	<=	1953 * P11_W1C
  Lp_prob += P24_W1	<=	795 * P24_W1C
  Lp_prob += P24_W2	<=	2215 * P24_W2C
  Lp_prob += P25_W1	<=	799 * P25_W1C
  Lp_prob += P28_W1	<=	1505 * P28_W1C
  Lp_prob += P39_W1	<=	1530 * P39_W1C
  Lp_prob += P125_W1	<=	1293 * P125_W1C
  Lp_prob += P132_W1	<=	2337 * P132_W1C
  Lp_prob += P141_W1	<=	1925 * P141_W1C
  Lp_prob += P142_W1	<=	895 * P142_W1C
  Lp_prob += P143_W1	<=	1202 * P143_W1C
  Lp_prob += P146_W1	<=	420 * P146_W1C
  Lp_prob += P146_W2	<=	845 * P146_W2C
  Lp_prob += P147_W1	<=	1630 * P147_W1C
  Lp_prob += P151_W1	<=	2586 * P151_W1C



  # Demand Constraints
  # Lower Zone Demand
  Lp_prob += LowerD <= P11_W1 + P28_W1 - P34_B1 - P34_B2 - P127_B1 - P127_B2 - P130_B1 - P130_B2 + (PRV127 * PRV127C) + (PRV309 * PRV309C) + (PRV311 * PRV311C)

  #Intermediate Zone Demand 
  Lp_prob += IntermediateD <= (P9_B1 + P9_B2) + (P25_W1-P25_B1) + P39_W1 + P132_W1 + P141_W1 + P151_W1 + (P24_B1 + P24_B2 + P24_B3) + P127_B1 + P127_B2 + P130_B1 + P130_B2 - P33_B1 - P33_B2 - P33_B3 - P39_B1 - P39_B2 - P39_B3 - P39_B4 - P40_B1 - P40_B2 - P40_B3 - P40_B4 + (PRV33 * PRV33C) + (PRV40 * PRV40C) - (PRV127 * PRV127C) - (PRV309 * PRV309C) - (PRV311 * PRV311C) + (PRV325 * PRV325C) + (PRV326 * PRV326C)

  #Intermediate Zone Demand With Wells 
  Lp_prob += IntermediateD <= (P9_W1) + (P25_W1-P25_B1) + P39_W1 + P132_W1 + P141_W1 + P151_W1 + (P24_W1 + P24_W2) + P127_B1 + P127_B2 + P130_B1 + P130_B2 - P33_B1 - P33_B2 - P33_B3 - P39_B1 - P39_B2 - P39_B3 - P39_B4 - P40_B1 - P40_B2 - P40_B3 - P40_B4 + (PRV33 * PRV33C) + (PRV40 * PRV40C) - (PRV127 * PRV127C) - (PRV309 * PRV309C) - (PRV311 * PRV311C) + (PRV325 * PRV325C) + (PRV326 * PRV326C)

  #Upper Zone Demand 
  Lp_prob += UpperD <= P25_B1 + P33_B1 + P33_B2 + P33_B3 + P39_B1 + P40_B1 + P40_B2 + P40_B3 + P40_B4 + (P143_B1 + P143_B2 + P143_B3) - P37_B1 - P37_B2 - P129_B1 - P129_B2 - P129_B3 - P129_B4 - P129_B5 - P134_B1 - P134_B2 - P134_B3 - P134_B4 - P134_B5 - P134_B6 - P134_B7 - P134_B8 - (PRV33 * PRV33C) - (PRV40 * PRV40C) + (PRV305 * PRV305C) + (PRV324 * PRV324C) - (PRV325 * PRV325C) - (PRV326 * PRV326C)

  #Upper Zone Demand With Wells 
  Lp_prob += UpperD <= P25_B1 + P33_B1 + P33_B2 + P33_B3 + P39_B1 + P40_B1 + P40_B2 + P40_B3 + P40_B4 + (P143_W1 + P146_W1 + P146_W2 + P147_W1) - P37_B1 - P37_B2 - P129_B1 - P129_B2 - P129_B3 - P129_B4 - P129_B5 - P134_B1 - P134_B2 - P134_B3 - P134_B4 - P134_B5 - P134_B6 - P134_B7 - P134_B8 - (PRV33 * PRV33C) - (PRV40 * PRV40C) + (PRV305 * PRV305C) + (PRV324 * PRV324C) - (PRV325 * PRV325C) - (PRV326 * PRV326C)
  
  #Foothill Zone Demand 
  Lp_prob += FoothillD <= P37_B1 + P37_B2 + P39_B2 + P39_B3 + P39_B4 + (P125_B1 + P125_B2) + P129_B1 + P129_B2 + P129_B3 + P134_B1 + P134_B2 + P134_B3 + P134_B4 + P134_B5 + (P142_B1 + P142_B2) - P56_B1 - P56_B2 - P99_B1 - P99_B2 - P108_B1 - P108_B2 - P131_B1 - P131_B2 - P131_B3 + (PRV108 * PRV108C) - (PRV305 * PRV305C) - (PRV324 * PRV324C) 

  #Foothill Zone Demand with Wells 
  Lp_prob += FoothillD <= P37_B1 + P37_B2 + P39_B2 + P39_B3 + P39_B4 + (P125_W1) + P129_B1 + P129_B2 + P129_B3 + P134_B1 + P134_B2 + P134_B3 + P134_B4 + P134_B5 + (P142_W1) - P56_B1 - P56_B2 - P99_B1 - P99_B2 - P108_B1 - P108_B2 - P131_B1 - P131_B2 - P131_B3 + (PRV108 * PRV108C) - (PRV305 * PRV305C) - (PRV324 * PRV324C)

  #Canal 1 
  Lp_prob += Canal1D <= P56_B1 + P56_B2 - P59_B1 - P59_B2 - P59_B3

  #Canal 2 
  Lp_prob += Canal2D <= P99_B1 + P99_B2 - P101_B1 - P101_B2 - P137_B1 - P137_B2 - P140_B1 - P140_B2

  #Canal 3 
  Lp_prob += Canal3D <= P108_B1 + P108_B2 + P129_B4 + P129_B5 + P131_B1 + P131_B2 + P131_B3 + P134_B6 + P134_B7 + P134_B8 + P142_B3 - (PRV108 * PRV108C)

  #Mountain 
  Lp_prob += MountainD <= P137_B1 + P137_B2 + P140_B1 + P140_B2 - P149_B1 - P149_B2 - P149_B3 - P149_B4 

  #Hydro34 
  Lp_prob += Hydro34D <= P34_B1 + P34_B2 

  #Hydro59 
  Lp_prob += Hydro59D <= P59_B1 + P59_B2 + P59_B3

  #Hydro101 
  Lp_prob += Hydro101D <= P101_B1 + P101_B2 

  #Hydro149 
  Lp_prob += Hydro149D <= P149_B1 + P149_B2 + P149_B3

  # Display the problem
  # print(Lp_prob)

  status = Lp_prob.solve()   # Solver
  print("Solution Status: ",p.LpStatus[status])   # The solution status

  #List of decision variable names
  PumpNameList=[P9_B1,P9_B2,P24_B1,P24_B2,P24_B3,P25_B1,P33_B1,P33_B2,P33_B3,P34_B1,P34_B2,P37_B1,P37_B2,P39_B1,P39_B2,P39_B3,P39_B4,P40_B1,P40_B2,P40_B3,P40_B4,P56_B1,P56_B2,P59_B1,P59_B2,P59_B3,P99_B1,P99_B2,P101_B1,P101_B2,P108_B1,P108_B2,P125_B1,P125_B2,P127_B1,P127_B2,P129_B1,P129_B2,P129_B3,P129_B4,P129_B5,P130_B1,P130_B2,P131_B1,P131_B2,P131_B3,P134_B1,P134_B2,P134_B3,P134_B4,P134_B5,P134_B6,P134_B7,P134_B8,P137_B1,P137_B2,P140_B1,P140_B2,P142_B1,P142_B2,P142_B3,P143_B1,P143_B2,P143_B3,P149_B1,P149_B2,P149_B3,P149_B4,P9_W1,P11_W1,P24_W1,P24_W2,P25_W1,P28_W1,P39_W1,P125_W1,P132_W1,P141_W1,P142_W1,P143_W1,P146_W1,P146_W2,P147_W1,P151_W1,PRV33,PRV40,PRV127,PRV305,PRV309,PRV311,PRV324,PRV325,PRV326] 
  #List of coefficient names (for the inputs)
  CoefficientNames=[P9_B1C,P9_B2C,P24_B1C,P24_B2C,P24_B3C,P25_B1C,P33_B1C,P33_B2C,P33_B3C,P34_B1C,P34_B2C,P37_B1C,P37_B2C,P39_B1C,P39_B2C,P39_B3C,P39_B4C,P40_B1C,P40_B2C,P40_B3C,P40_B4C,P56_B1C,P56_B2C,P59_B1C,P59_B2C,P59_B3C,P99_B1C,P99_B2C,P101_B1C,P101_B2C,P108_B1C,P108_B2C,P125_B1C,P125_B2C,P127_B1C,P127_B2C,P129_B1C,P129_B2C,P129_B3C,P129_B4C,P129_B5C,P130_B1C,P130_B2C,P131_B1C,P131_B2C,P131_B3C,P134_B1C,P134_B2C,P134_B3C,P134_B4C,P134_B5C,P134_B6C,P134_B7C,P134_B8C,P137_B1C,P137_B2C,P140_B1C,P140_B2C,P142_B1C,P142_B2C,P142_B3C,P143_B1C,P143_B2C,P143_B3C,P149_B1C,P149_B2C,P149_B3C,P149_B4C,P9_W1C,P11_W1C,P24_W1C,P24_W2C,P25_W1C,P28_W1C,P39_W1C,P125_W1C,P132_W1C,P141_W1C,P142_W1C,P143_W1C,P146_W1C,P146_W2C,P147_W1C,P151_W1C,PRV33C,PRV40C,PRV108C,PRV127C,PRV305C,PRV309C,PRV311C,PRV324C,PRV325C,PRV326C]
  #Max Capacity value for each decision variable
  MaxCapacity = [542,612,980,850,760,798,1553,1004,934,285,892,835,795,425,725,970,863,1301,1293,1295,1308,1119,532,647,615,286,624,541,992,1004,1278,1207,1187,595,1285,1361,1647,1636,1648,980,971,847,807,442,345,358,905,860,869,896,833,627,660,853,530,523,777,800,977,498,820,2950,2280,2500,173,215,1786,1690,1112,1953,795,2215,799,1505,1530,1293,2337,1925,895,1202,420,845,1630,2586,1800,1800,1800,1800,1800,1800,1800,1800,1800]

  #define count
  count = 0

  #Define output dataframe (df)
  df = pd.DataFrame()
  df['Pump Name'] = []
  df['Optimized Usage'] = []
  df['Max Capacity'] = []
  df['Percentage Input'] = []

  for i in PumpNameList:
    df.loc[count,'Pump Name']=PumpNameList[count]
    df.loc[count,'Optimized Usage']=p.value(i)
    df.loc[count,'Max Capacity']=MaxCapacity[count]
    df.loc[count, 'Percentage Input'] = coefficients[count] #This can be used once we have the percentage inputs
    count +=1

  pump_names = df["Pump Name"]
  optimized_usage = df["Optimized Usage"]
  max_capacity = df["Max Capacity"]
  percentage_input = df["Percentage Input"]

  pd.set_option("display.max_rows", None, "display.max_columns", None)

  print(df)
  print(pump_names[0])
  




  # THIS IS WHAT YOU NEED JEN to display the output
  # This gives a dictionary of the plant name and its optimized output

  # Optimized_Usage = []
  # for i in VariableNameList:
  #   Optimized_Usage.append(p.value(i))
  # Output_List = dict(zip(PumpNameList, Optimized_Usage))


  # print(Output_List)

  Final_Minimized_Cost = p.value(Lp_prob.objective)

  #print(Final_Minimized_Cost) #Talk later about how to display this in UI

  return [df, Final_Minimized_Cost]

  #Note for Rishi & Zach: investigate units (gpd versus gpm)

  #Output total cost in the code


# user_inputs2 = [2000.0, 10000.0, 2000.0, 10000.0, 4000.0, 10000.0, 200000.0, 300000.0, 200000.0, 20000.0, 500000.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

# output_data_frame = linear_programming_model(user_inputs2)


# # optimized_usage = output_data_frame["Optimized Usage"]
# # max_capacity = output_data_frame["Max Capacity"]
# # percentage_input = output_data_frame["Percentage Input"]

# rows_of_data = []

# for index,row in output_data_frame.iterrows():
#   pump = row["Pump Name"]
#   optimized_usage = row["Optimized Usage"]
#   max_capacity = row["Max Capacity"]
#   percentage_input = row["Percentage Input"]
#   rows_of_data += [[pump, optimized_usage, max_capacity, percentage_input]]

# print(rows_of_data)

# print(row0)
# print(first)
# print(type(row0))
